name: Build ShadPs4Manager

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        target: desktop
        arch: linux_x64
        modules: 'qtbase qttools'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build build-essential
        
        # Ensure zlib header exists
        if [ ! -f external/zlib/zconf.h ]; then
          cp external/zlib/zconf.h.in external/zlib/zconf.h
          echo "Copied zconf.h from zconf.h.in"
        fi
    
    - name: Configure external dependencies
      run: |
        cd external/zlib
        ./configure
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja -DBUILD_GUI=ON
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Test binaries
      run: |
        echo "=== Checking built binaries ==="
        ls -lh ${{github.workspace}}/build/bin/
        
        if [ -f "${{github.workspace}}/build/bin/shadps4-manager-gui" ]; then
          echo "✅ GUI binary built successfully"
        else
          echo "❌ GUI binary not found"
          exit 1
        fi
        
        if [ -f "${{github.workspace}}/build/bin/shadps4-pkg-extractor" ]; then
          echo "✅ PKG extractor binary built successfully"
        else
          echo "❌ PKG extractor binary not found"
          exit 1
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ShadPs4Manager-Linux-x64
        path: |
          build/bin/shadps4-manager-gui
          build/bin/shadps4-pkg-extractor

  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        target: desktop
        arch: win64_msvc2022_64
        modules: 'qtbase qttools'
        cache: false
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Configure external dependencies
      run: |
        # Ensure zlib header exists
        if (!(Test-Path "external/zlib/zconf.h")) {
          Copy-Item "external/zlib/zconf.h.in" "external/zlib/zconf.h"
          Write-Host "Copied zconf.h from zconf.h.in"
        }
      shell: powershell
    
    - name: Configure external dependencies
      run: |
        # For Windows, copy zconf.h.in to zconf.h if it doesn't exist
        if (!(Test-Path "external/zlib/zconf.h")) {
          Copy-Item "external/zlib/zconf.h.in" "external/zlib/zconf.h"
        }
      shell: powershell
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="$env:Qt6_DIR" -DBUILD_GUI=ON
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- /m
    
    - name: Test binaries
      run: |
        Write-Host "=== Checking built binaries ==="
        Get-ChildItem "${{github.workspace}}/build/bin/Release/"
        
        if (Test-Path "${{github.workspace}}/build/bin/Release/shadps4-manager-gui.exe") {
          Write-Host "✅ GUI binary built successfully"
        } else {
          Write-Host "❌ GUI binary not found"
          exit 1
        }
        
        if (Test-Path "${{github.workspace}}/build/bin/Release/shadps4-pkg-extractor.exe") {
          Write-Host "✅ PKG extractor binary built successfully"
        } else {
          Write-Host "❌ PKG extractor binary not found"
          exit 1
        }
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ShadPs4Manager-Windows-x64
        path: |
          build/bin/Release/shadps4-manager-gui.exe
          build/bin/Release/shadps4-pkg-extractor.exe

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        target: desktop
        modules: 'qtbase qttools'
    
    - name: Install dependencies
      run: |
        brew install cmake ninja
        
        # Ensure zlib header exists
        if [ ! -f external/zlib/zconf.h ]; then
          cp external/zlib/zconf.h.in external/zlib/zconf.h
          echo "Copied zconf.h from zconf.h.in"
        fi
    
    - name: Configure external dependencies
      run: |
        cd external/zlib
        ./configure
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja -DBUILD_GUI=ON
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: Test binaries
      run: |
        echo "=== Checking built binaries ==="
        ls -lh ${{github.workspace}}/build/bin/
        
        if [ -f "${{github.workspace}}/build/bin/shadps4-manager-gui" ]; then
          echo "✅ GUI binary built successfully"
        else
          echo "❌ GUI binary not found"
          exit 1
        fi
        
        if [ -f "${{github.workspace}}/build/bin/shadps4-pkg-extractor" ]; then
          echo "✅ PKG extractor binary built successfully"
        else
          echo "❌ PKG extractor binary not found"
          exit 1
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ShadPs4Manager-macOS-x64
        path: |
          build/bin/shadps4-manager-gui
          build/bin/shadps4-pkg-extractor

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ShadPs4Manager-Linux-x64/*.tar.gz
          ShadPs4Manager-Windows-x64/*.zip  
          ShadPs4Manager-macOS-x64/*.tar.gz