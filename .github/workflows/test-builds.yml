name: Test Builds

on:
  workflow_dispatch:
    inputs:
      test_linux:
        description: 'Test Linux build'
        required: false
        default: true
        type: boolean
      test_windows:
        description: 'Test Windows build'
        required: false
        default: true
        type: boolean

jobs:
  test-linux:
    if: github.event.inputs.test_linux == 'true'
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      
    - name: Set up build environment
      run: |
        sudo apt update
        sudo apt install -y \
          cmake \
          build-essential \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev \
          pkg-config \
          ninja-build
          
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.7.0'
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'
        modules: 'qtbase qttools'
        cache: true
        setup-python: 'false'
          
    - name: Configure external dependencies
      run: |
        cd external/zlib
        ./configure
          
    - name: Debug Qt6 installation
      run: |
        echo "=== Qt6 Package Info ==="
        dpkg -l | grep -i qt6
        echo ""
        echo "=== Qt6 CMake Files ==="
        find /usr -name "*Qt6*" -type d 2>/dev/null | head -20
        echo ""
        echo "=== CMake Module Path ==="
        ls -la /usr/lib/x86_64-linux-gnu/cmake/ | grep -i qt
        
    - name: Test CMake Configuration
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_GUI=ON \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Build project
      run: |
        cmake --build build --config Release -j$(nproc)
        
    - name: Test binary
      run: |
        if [ -f "build/bin/shadps4-manager-gui" ]; then
          echo "✅ GUI binary built successfully"
          file build/bin/shadps4-manager-gui
          ldd build/bin/shadps4-manager-gui
        else
          echo "❌ GUI binary not found"
          ls -la build/bin/
          exit 1
        fi

  test-windows:
    if: github.event.inputs.test_windows == 'true'
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
      
    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.7.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        modules: 'qtbase qttools'
        cache: true
        setup-python: 'false'
      
    - name: Configure external dependencies
      run: |
        # For Windows, copy zconf.h.in to zconf.h if it doesn't exist
        if (!(Test-Path "external/zlib/zconf.h")) {
          Copy-Item "external/zlib/zconf.h.in" "external/zlib/zconf.h"
          Write-Host "Generated zconf.h from zconf.h.in"
        } else {
          Write-Host "zconf.h already exists"
        }
      shell: powershell
      
    - name: Test CMake Configuration
      run: |
        cmake -B build `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_GUI=ON `
          -DCMAKE_VERBOSE_MAKEFILE=ON `
          -DCMAKE_PREFIX_PATH="$env:CMAKE_PREFIX_PATH"
      shell: powershell
      
    - name: Build project
      run: |
        cmake --build build --config Release -- /m
      shell: powershell
      
    - name: Test binary
      run: |
        if (Test-Path "build/bin/Release/shadps4-manager-gui.exe") {
          Write-Host "✅ GUI binary built successfully"
          Get-ChildItem "build/bin/Release/shadps4-manager-gui.exe"
        } else {
          Write-Host "❌ GUI binary not found"
          Get-ChildItem "build/bin/Release/" -ErrorAction SilentlyContinue
          exit 1
        }
      shell: powershell