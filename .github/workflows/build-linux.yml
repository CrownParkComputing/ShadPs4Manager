name: Build Linux

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'none'
        type: choice
        options:
        - none
        - patch
        - minor
        - major

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        
    - name: Set up build environment
      run: |
        sudo apt update
        sudo apt install -y \
          cmake \
          build-essential \
          qt6-base-dev \
          qt6-tools-dev \
          qt6-tools-dev-tools \
          libqt6core6 \
          libqt6gui6 \
          libqt6widgets6 \
          libqt6network6 \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libxrandr-dev \
          libxinerama-dev \
          libxcursor-dev \
          libxi-dev
          
    - name: Configure external dependencies
      run: |
        cd external/zlib
        ./configure \
          pkg-config \
          ninja-build
          
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(grep "project.*VERSION" CMakeLists.txt | sed -n 's/.*VERSION \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Bump version
      id: version
      if: github.event.inputs.version_bump != 'none' && github.event.inputs.version_bump != ''
      run: |
        chmod +x build.sh
        ./build.sh ${{ github.event.inputs.version_bump }}
        NEW_VERSION=$(grep "project.*VERSION" CMakeLists.txt | sed -n 's/.*VERSION \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Use current version if no bump
      if: github.event.inputs.version_bump == 'none' || github.event.inputs.version_bump == ''
      run: |
        echo "version=${{ steps.current_version.outputs.version }}" >> $GITHUB_OUTPUT
        
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_COMPILER=g++ \
          -DBUILD_GUI=ON \
          -DGIT_REV="${{ github.sha }}" \
          -DGIT_BRANCH="${{ github.ref_name }}" \
          -DGIT_DESC="${{ github.ref_name }}-${{ github.sha }}"
          
    - name: Build project
      run: |
        cmake --build build --config Release -j$(nproc)
        
    - name: Test binaries
      run: |
        if [ -f "build/bin/shadps4-manager-gui" ]; then
          echo "GUI binary built successfully"
          ldd build/bin/shadps4-manager-gui || true
        else
          echo "GUI binary not found"
          exit 1
        fi
        
        if [ -f "build/bin/shadps4-cli" ]; then
          echo "CLI binary built successfully"
          ldd build/bin/shadps4-cli || true
        else
          echo "CLI binary not found - this may be expected"
        fi
        
    - name: Create distribution
      run: |
        VERSION=${{ steps.current_version.outputs.version }}
        if [ "${{ steps.version.outputs.version }}" != "" ]; then
          VERSION=${{ steps.version.outputs.version }}
        fi
        
        DIST_NAME="ShadPs4Manager-${VERSION}-linux-x64"
        mkdir -p dist/$DIST_NAME
        
        # Copy binaries
        cp build/bin/shadps4-manager-gui dist/$DIST_NAME/
        [ -f build/bin/shadps4-cli ] && cp build/bin/shadps4-cli dist/$DIST_NAME/ || true
        
        # Make executable
        chmod +x dist/$DIST_NAME/shadps4-manager-gui
        [ -f dist/$DIST_NAME/shadps4-cli ] && chmod +x dist/$DIST_NAME/shadps4-cli || true
        
        # Copy documentation
        cp README.md dist/$DIST_NAME/ 2>/dev/null || true
        cp LICENSE dist/$DIST_NAME/ 2>/dev/null || true
        
        # Create install script
        cat > dist/$DIST_NAME/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing ShadPs4Manager..."
        sudo cp shadps4-manager-gui /usr/local/bin/
        [ -f shadps4-cli ] && sudo cp shadps4-cli /usr/local/bin/ || true
        echo "Installation complete. Run 'shadps4-manager-gui' to start."
        EOF
        chmod +x dist/$DIST_NAME/install.sh
        
        # Create archive
        cd dist
        tar -czf ${DIST_NAME}.tar.gz $DIST_NAME
        cd ..
        
        echo "DIST_NAME=${DIST_NAME}" >> $GITHUB_ENV
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.tar.gz
          build/bin/shadps4-manager-gui
          build/bin/shadps4-cli
        retention-days: 30
        
    - name: Upload release artifacts
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: release-linux-x64
        path: dist/*.tar.gz
        retention-days: 90

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-linux-x64
        path: release-assets
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}